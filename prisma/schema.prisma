generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  account_id    Int              @id @default(autoincrement())
  email         String           @unique @db.VarChar(255)
  password      String           @db.VarChar(255)
  user_name     String?          @db.VarChar(100)
  phone         String?          @db.VarChar(20)
  role          String           @default("customer") @db.VarChar(20)
  created_at    DateTime         @default(now()) @db.Timestamp(6)
  events        Event[]
  addresses     Address[]
  logs          Log[]
  notifications Notification[]
  support_requests SupportRequest[]
}

model Address {
  address_id    Int       @id @default(autoincrement())
  account_id    Int?
  event_id      Int?      @unique
  street        String?   @db.VarChar(255)
  city          String?   @db.VarChar(100)
  state         String?   @db.VarChar(100)
  country       String?   @db.VarChar(100)
  postal_code   String?   @db.VarChar(20)
  latitude      Float?
  longitude     Float?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  account       Account?  @relation(fields: [account_id], references: [account_id], onDelete: SetNull, onUpdate: Cascade)
  event         Event?    @relation("EventToAddress", fields: [event_id], references: [event_id])
}

model Event {
  event_id      Int            @id @default(autoincrement())
  account_id    Int?
  address_id    Int?           @unique
  event_title   String         @db.VarChar(255)
  event_type    String?        @db.VarChar(50)
  date          DateTime       @db.Timestamp(6)
  status        String         @default("pending") @db.VarChar(20)
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  account       Account?       @relation(fields: [account_id], references: [account_id], onDelete: SetNull, onUpdate: Cascade)
  address       Address?       @relation("EventToAddress")
  eventServices EventService[]
  payments      Payment[]
  support_requests SupportRequest[]
}

model Service {
  service_id    Int            @id @default(autoincrement())
  service_name  String         @db.VarChar(100)
  description   String?
  price         Decimal        @db.Decimal(10, 2)
  category      String?        @db.VarChar(50)
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  eventServices EventService[]
}

model EventService {
  event_id   Int
  service_id Int
  quantity   Int?           @default(1)
  event      Event          @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: Cascade)
  service    Service        @relation(fields: [service_id], references: [service_id], onDelete: Cascade, onUpdate: Cascade)
  @@id([event_id, service_id])
}

model Payment {
  payment_id    Int       @id @default(autoincrement())
  event_id      Int?
  amount        Decimal   @db.Decimal(10, 2)
  status        String    @default("pending") @db.VarChar(20)
  payment_method String?  @db.VarChar(50)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  event         Event?    @relation(fields: [event_id], references: [event_id], onDelete: SetNull, onUpdate: Cascade)
}

model SupportRequest {
  support_id    Int       @id @default(autoincrement())
  account_id    Int?
  event_id      Int?
  subject       String    @db.VarChar(255)
  description   String
  status        String    @default("pending") @db.VarChar(20)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  resolved_at   DateTime? @db.Timestamp(6)
  account       Account?  @relation(fields: [account_id], references: [account_id], onDelete: SetNull, onUpdate: Cascade)
  event         Event?    @relation(fields: [event_id], references: [event_id], onDelete: SetNull, onUpdate: Cascade)
}

model Notification {
  notification_id Int       @id @default(autoincrement())
  account_id      Int?
  title           String    @db.VarChar(255)
  message         String
  type            String?   @db.VarChar(50)
  is_read         Boolean   @default(false)
  email_sent      Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  account         Account?  @relation(fields: [account_id], references: [account_id], onDelete: SetNull, onUpdate: Cascade)
}

model Faq {
  faq_id         Int       @id @default(autoincrement())
  question       String
  answer         String
  created_at     DateTime  @default(now()) @db.Timestamp(6)
}

model Log {
  log_id         Int       @id @default(autoincrement())
  account_id     Int?
  action         String?   @db.VarChar(100)
  details        Json?
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  account        Account?  @relation(fields: [account_id], references: [account_id], onDelete: SetNull, onUpdate: Cascade)
}